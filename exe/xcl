#!/usr/bin/env ruby

require 'xcode_launcher'
require 'optparse'
require 'colorize'
require 'shellwords'
require 'yaml'

default_file='.xcl_defaults'

options = {}
options = YAML.load_file(default_file).inject({}) {|memo,(k,v)| memo[k.to_sym] = v; memo} if File.file?(default_file)

OptionParser.new do |opts|
  opts.banner = 'Useage: xcl [options] [project/playground]'

  opts.on('-i', '--install', 'Installs Xcode from mounted DMG file') do
    options[:install] = true
  end

  opts.on('-a', '--archive', 'Archives the currently installed Xcode.app') do
    options[:archive] = true
  end

  opts.on('-b', '--beta', 'Launch with Xcode beta') do
    options[:beta] = true
  end

  opts.on('-l', '--list', 'List Xcode versions installed') do
    options[:list] = true
  end

  opts.on('-v', '--version VERSION',
          'Specifies which Xcode version to use (non-beta)') do |version|

    options[:version] = version
  end

  opts.on('-h', '--help', 'Prints this help') do
    puts opts
    exit
  end
end.parse!

# Lookup installed Xcode versions
executables = XcodeLauncher.executables

# List all Xcode version installed, then exit
if options[:list]
  puts 'Version'.center(10) + 'Installed as'
  executables.each do |version, path|
    puts version.ljust(10).colorize(:white) \
    + File.basename(path, '.app').colorize(:green)
  end
  exit
end

# Install Xcode form mounted DMG
if options[:install]
  XcodeLauncher.install
  exit
end

# Archive current Xcode.app
if options[:archive]
  XcodeLauncher.archive
  exit
end

# Figure out which Xcode to use
target_executable = executables.select do |key, path|
  ret = false
  if options[:beta] == true
    ret = true if path.include? '-beta.app'
  elsif options[:version]
    ret = true if key == options[:version]
  elsif path.include? 'Xcode.app'
    ret = true
  end
  ret
end
version, path = target_executable.first

# Figure out which project/playground to open
filename = ARGV.count == 1 ? ARGV[0] : XcodeLauncher.find_project

# Open project/playground in Xcode, then exit
unless path.nil? || filename.nil?
  banner = 'Using version ' + version.colorize(:green)
  banner += ' (beta)' if path.include?('-beta.app')
  banner += ' to open ' + File.basename(filename).colorize(:green)
  puts banner

  `env DEVELOPER_DIR=#{path} xed #{Shellwords.escape(filename)}`
  exit
end

# Just open Xcode
`env DEVELOPER_DIR=#{path} xed .` unless path.nil?
